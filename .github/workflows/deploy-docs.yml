
name: 部署文档

on:
  push:
    branches:
      - master # 或者 main，根据默认分支名称决定

permissions:   # 设置权限, 允许 GitHub Actions 写入仓库内容
  contents: write

jobs:
  deploy-gh-pages:          # 定义一个名为 deploy-gh-pages 的作业
    runs-on: ubuntu-latest  # 在最新的 Ubuntu 环境中运行
    # push时，只有提交信息包含 [deploy] 或 [update] 标签时触发
    # repository_dispatch时，只有 event-type 为 trigger_site_deployment 时触发
    if: |
      github.event_name == 'push' && (
        contains(github.event.head_commit.message, '[deploy]') || contains(github.event.head_commit.message, '[update]'))
    steps:
      - name: Checkout      # 检出仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 这一行只能检出本仓库中记录的子模块的版本，也就是停留在父仓库记录的旧提交，无法更到远程最新，需要后面单独处理
          submodules: true

      - name: 更新子模块到远程最新版本
        run: |
          # git submodule update --remote
          # 递归初始化子模块（处理嵌套子模块）
          git submodule update --init --recursive --force
          # 强制将每个子模块更新到远程默认分支的最新提交
          git submodule foreach ' git fetch --all --prune --tags
          git reset --hard origin/$(git remote show origin | grep "HEAD branch" | cut -d" " -f5)'

      - name: 打印相关路径
        run: | # | 为 yaml 的特定符号，其下可以使用多行文字。
          echo "当前路径为 $(pwd)"
          echo "工作路径为 ${{ github.workspace }}"
          echo "HOME路径为 $HOME"

      - name: 获取相关提交信息
        id: get_commit_info
        run: |
          # src/sdocs/nodejs-docs 获取nodejs-docs的相关信息
          cd ${{ github.workspace }}/src/sdocs/nodejs-docs # 切换到nodejs-docs目录
          echo "当前路径为 $(pwd)"
          echo "NODEJS_REPO_NAME=$(git config --get remote.origin.url | sed -E 's/(git@|https:\/\/)github.com(:|\/)([^\/]+)\/([^\.]+)(\.git)?/\3\/\4/')" >> $GITHUB_OUTPUT
          echo "NODEJS_COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "NODEJS_SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "NODEJS_COMMIT_MESSAGE=$(git log -1 --pretty=%B | head -n1)" >> $GITHUB_OUTPUT

          # 获取主仓库提交信息
          cd ${{ github.workspace }} # 切换回工作目录
          echo "当前路径为 $(pwd)"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c 1-7)
          echo "MAIN_SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "MAIN_COMMIT_MESSAGE=$(git log -1 --pretty=%B | head -n1)" >> $GITHUB_OUTPUT
      
      - name: 打印提交信息
        run: |
          echo "source/_posts/nodejs-docs Repository: ${{ steps.get_commit_info.outputs.NODEJS_REPO_NAME }}"
          echo "source/_posts/nodejs-docs Commit ID : ${{ steps.get_commit_info.outputs.NODEJS_COMMIT_ID }}"
          echo "source/_posts/nodejs-docs Short SHA : ${{ steps.get_commit_info.outputs.NODEJS_SHORT_SHA }}"
          echo "source/_posts/nodejs-docs Commit Message: ${{ steps.get_commit_info.outputs.NODEJS_COMMIT_MESSAGE }}"
          echo "main Repository: ${{ github.repository }}"
          echo "main Commit ID : ${{ github.sha }}"
          echo "main Short SHA : ${{ steps.get_commit_info.outputs.MAIN_SHORT_SHA }}"
          echo "main Commit Message: ${{ steps.get_commit_info.outputs.MAIN_COMMIT_MESSAGE }}"

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm       # 使用 pnpm 缓存依赖

      - name: 安装依赖
        run: |
          corepack enable                # 启用 corepack
          pnpm install --frozen-lockfile # 安装依赖，使用锁文件确保一致性

      - name: 构建文档
        env:
          NODE_OPTIONS: --max_old_space_size=8192 # 设置 Node.js 内存限制
        run: |-
          pnpm run docs:build
          > src/.vuepress/dist/.nojekyll

      - name: 部署文档
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          # 部署文档
          single-commit: true # 使用单个提交进行部署
          branch: gh-pages
          folder: src/.vuepress/dist
